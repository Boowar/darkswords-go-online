package routes

import (
	"encoding/json"
	"log"
	"net/http"

	"dark-swords/game"

	"github.com/gorilla/websocket"
)

var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true
	},
}

func HandleWebSocket(w http.ResponseWriter, r *http.Request) {
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ WebSocket: %v", err)
		return
	}
	log.Printf("üîå –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	defer func() {
		game.RemoveClient(conn)
	}()

	for {
		msg := struct {
			Type string          `json:"type"`
			Data json.RawMessage `json:"data"`
		}{}

		err := conn.ReadJSON(&msg)
		if err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			break
		}

		log.Printf("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: type=%s", msg.Type)

		switch msg.Type {
		case "join":
			game.HandleJoin(conn, msg.Data)
		case "move":
			game.HandleMove(conn, msg.Data)
		case "attack_monster":
			game.HandleAttackMonster(conn, msg.Data)
		case "loot_corpse":
			game.HandleLootCorpse(conn, msg.Data)
		case "equip":
			game.HandleEquip(conn, msg.Data)
		case "unequip":
			game.HandleUnequip(conn, msg.Data)
		case "use_spell":
			game.HandleUseSpell(conn, msg.Data)
		default:
			log.Printf("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: %s", msg.Type)
		}
	}
}
