package game

import (
	"dark-swords/config"
	"dark-swords/types"
	"dark-swords/utils"
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"time"

	"github.com/gorilla/websocket"
)

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
var Battles map[string]*types.Battle = make(map[string]*types.Battle)

// --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
func SetGameBattle(bt map[string]*types.Battle) {
	Battles = bt
}

func HandleAttackMonster(conn *websocket.Conn, data json.RawMessage) {
	type AttackData struct {
		Name string `json:"name"`
		X    int    `json:"x"`
		Y    int    `json:"y"`
	}

	var payload AttackData
	if err := json.Unmarshal(data, &payload); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∞—Ç–∞–∫–∏: %v", err)
		return
	}

	playerName := payload.Name
	x, y := payload.X, payload.Y

	Mutex.Lock()
	Mutex.Unlock()

	// –ù–∞–π–¥—ë–º –∏–≥—Ä–æ–∫–∞
	playerIndex := -1
	for i, p := range GameState.Players {
		if p.Name == playerName && p.Position.X == x && p.Position.Y == y {
			playerIndex = i
			break
		}
	}

	if playerIndex == -1 {
		log.Printf("üö´ –ò–≥—Ä–æ–∫ %s –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ [%d,%d]", playerName, x, y)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–Ω—Å—Ç—Ä –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
	if len(GameState.Map[y][x].Monsters) == 0 {
		log.Printf("üö´ –í –∫–æ–º–Ω–∞—Ç–µ [%d,%d] –Ω–µ—Ç –º–æ–Ω—Å—Ç—Ä–æ–≤", x, y)
		return
	}

	// –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –±–æ–π
	BattleKey := fmt.Sprintf("%d,%d", x, y)
	if _, exists := Battles[BattleKey]; !exists {
		Battles[BattleKey] = &types.Battle{
			RoomX:        x,
			RoomY:        y,
			BattleID:     BattleKey,
			Participants: map[string]bool{playerName: true},
			TurnTimer:    time.AfterFunc(2*time.Second, func() { startBattleRound(x, y) }),
		}
		log.Printf("‚öîÔ∏è –ë–æ–π –Ω–∞—á–∞—Ç –≤ [%d,%d]", x, y)
	} else {
		Battles[BattleKey].Participants[playerName] = true
		log.Printf("ü§ù %s –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–æ—é –≤ [%d,%d]", playerName, x, y)
	}

	BroadcastGameState()
}

func startBattleRound(x, y int) {
	Mutex.Lock()
	Mutex.Unlock()

	BattleKey := fmt.Sprintf("%d,%d", x, y)
	Battle := Battles[BattleKey]
	if Battle == nil || len(Battle.Participants) == 0 {
		delete(Battles, BattleKey)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	var attackers []types.Player
	var targetMonster types.Monster
	for _, p := range GameState.Players {
		if Battle.Participants[p.Name] {
			attackers = append(attackers, p)
		}
	}

	targetMonster = GameState.Map[y][x].Monsters[0]
	// --- –õ–æ–≥–∏–∫–∞ –±–æ—è ---
	var logMessages []string

	// –ë–æ–π
	totalPlayerDamage := 0

	for _, p := range attackers {
		damage := calculatePhysicalDamage(p)
		totalPlayerDamage += damage
		log.Printf("üó°Ô∏è %s –Ω–∞–Ω–æ—Å–∏—Ç %d —É—Ä–æ–Ω–∞", p.Name, damage)
		logMessages = append(logMessages, fmt.Sprintf("üó°Ô∏è %s –Ω–∞–Ω–æ—Å–∏—Ç %d —É—Ä–æ–Ω–∞", p.Name, damage))
	}

	// –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –º–æ–Ω—Å—Ç—Ä—É
	targetMonster.HP -= totalPlayerDamage
	log.Printf("üëπ –ú–æ–Ω—Å—Ç—Ä '%s' HP: %d", targetMonster.Name, targetMonster.HP)
	logMessages = append(logMessages, fmt.Sprintf("üëπ %s HP: %d", targetMonster.Name, targetMonster.HP))

	// –ï—Å–ª–∏ –º–æ–Ω—Å—Ç—Ä –º—ë—Ä—Ç–≤ ‚Üí –Ω–∞–≥—Ä–∞–¥–∞
	if targetMonster.HP <= 0 {
		log.Printf("üíÄ –ú–æ–Ω—Å—Ç—Ä '%s' –ø–æ–±–µ–∂–¥—ë–Ω!", targetMonster.Name)
		GameState.Map[y][x].Monsters = GameState.Map[y][x].Monsters[1:] // —É–¥–∞–ª—è–µ–º –º–æ–Ω—Å—Ç—Ä–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã

		// --- –õ–æ–≥–∏–∫–∞ –≤—ã–ø–∞–¥–µ–Ω–∏—è —Ç—Ä–æ—Ñ–µ—è ---
		loot := getRandomLoot()
		if loot.Name != "" {
			for name := range Battle.Participants {
				i := findPlayerIndex(name)
				if i == -1 {
					continue
				}

				GameState.Players[i].Items = append(GameState.Players[i].Items, loot)

				log.Printf("üéÅ %s –ø–æ–ª—É—á–∏–ª —Ç—Ä–æ—Ñ–µ–π: %s", name, loot.Name)
				utils.SendChat(fmt.Sprintf("%s –ø–æ–ª—É—á–∏–ª —Ç—Ä–æ—Ñ–µ–π: %s", name, loot.Name))
			}
		}

		// –î–µ–ª–∏–º –æ–ø—ã—Ç –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
		xpReward := targetMonster.Level * 3
		for name := range Battle.Participants {
			for i, p := range GameState.Players {
				if p.Name == name {
					p.CurrentXP += xpReward
					checkLevelUp(i)
					GameState.Players[i] = p
					log.Printf("üèÖ %s –ø–æ–ª—É—á–∏–ª %d –æ–ø—ã—Ç–∞", p.Name, xpReward)
					logMessages = append(logMessages, fmt.Sprintf("üèÖ %s –ø–æ–ª—É—á–∏–ª %d –æ–ø—ã—Ç–∞", p.Name, xpReward))
				}
			}
		}

		GameState.Log = append(GameState.Log, logMessages...)
		GameState.Log = append(GameState.Log, fmt.Sprintf("üíÄ –ú–æ–Ω—Å—Ç—Ä '%s' –ø–æ–±–µ–∂–¥—ë–Ω!", targetMonster.Name))
		delete(Battles, BattleKey)
		BroadcastGameState()
		return
	} else {
		GameState.Map[y][x].Monsters[0] = targetMonster
	}

	// –¢–µ–ø–µ—Ä—å –º–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç
	monsterDamage := targetMonster.Damage
	for _, p := range attackers {
		i := findPlayerIndex(p.Name)
		GameState.Players[i].HP -= monsterDamage
		log.Printf("üëπ –ê—Ç–∞–∫—É–µ—Ç %s ‚Üí %d —É—Ä–æ–Ω–∞", p.Name, monsterDamage)
		logMessages = append(logMessages, fmt.Sprintf("üëπ %s –∞—Ç–∞–∫—É–µ—Ç %s. –£—Ä–æ–Ω: %d", targetMonster.Name, p.Name, monsterDamage))

		if GameState.Players[i].HP <= 0 {
			GameState.Players[i].IsAlive = false
			GameState.Map[GameState.Players[i].Position.Y][GameState.Players[i].Position.X].CorpsePlayer = p.Name
			GameState.Map[GameState.Players[i].Position.Y][GameState.Players[i].Position.X].CorpseTime = time.Now().Add(24 * time.Hour)
			log.Printf("‚ò†Ô∏è %s –ø–æ–≥–∏–±–∞–µ—Ç –≤ –±–æ—é", p.Name)
			logMessages = append(logMessages, fmt.Sprintf("‚ò†Ô∏è %s –ø–æ–≥–∏–±–∞–µ—Ç –≤ –±–æ—é", p.Name))
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –±–æ—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
	GameState.Log = append(GameState.Log, logMessages...)

	BroadcastGameState()

	// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–π –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
	Battle.TurnTimer.Reset(2 * time.Second)
}

func getRandomLoot() types.Item {
	// –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è —Ç—Ä–æ—Ñ–µ—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60%)
	if rand.Intn(100) > 60 {
		return types.Item{} // –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ
	}

	item := config.MonsterLootTable[rand.Intn(len(config.MonsterLootTable))]
	return item
}
