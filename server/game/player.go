package game

import (
	"dark-swords/types"
	"dark-swords/utils"
	"encoding/json"
	"fmt"
	"log"
	"time"

	"github.com/gorilla/websocket"
)

func calculatePlayerDamage(p types.Player) int {
	damage := p.Strength
	for _, item := range p.EquippedItems {
		switch v := item.Bonus.(type) {
		case map[string]interface{}:
			if dmg, ok := v["damage"].(float64); ok {
				damage += int(dmg)
			}
		case map[string]int:
			damage += v["damage"]
		case int:
			damage += v
		}
	}
	return damage
}

func findPlayerIndex(name string) int {
	for i, p := range GameState.Players {
		if p.Name == name {
			return i
		}
	}
	return -1
}

func HandleMove(conn *websocket.Conn, data json.RawMessage) {
	type MoveData struct {
		Name string `json:"name"`
		To   struct {
			X int `json:"x"`
			Y int `json:"y"`
		} `json:"to"`
	}

	var payload MoveData
	if err := json.Unmarshal(data, &payload); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö MOVE: %v", err)
		return
	}

	playerName := payload.Name
	to := payload.To

	Mutex.Lock()
	Mutex.Unlock()

	for i, p := range GameState.Players {
		if p.Name == playerName {
			oldX, oldY := p.Position.X, p.Position.Y
			newX, newY := to.X, to.Y

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
			if newX < 0 || newX >= 10 || newY < 0 || newY >= 10 {
				log.Printf("üö´ –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–∞—Ä—Ç—ã")
				return
			}

			//–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É
			toType := GameState.Map[newY][newX].BiomeType

			if toType == "empty" {
				log.Printf("üö´ –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–∞—Ä—Ç—ã")
				return
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
			GameState.Map[oldY][oldX].CorpsePlayer = ""
			GameState.Map[newY][newX].CorpsePlayer = ""

			GameState.Players[i].Position.X = newX
			GameState.Players[i].Position.Y = newY
			GameState.Players[i].CurrentXP += 1 // —Ç–µ—Å—Ç–æ–≤—ã–π –æ–ø—ã—Ç –∑–∞ —Ö–æ–¥

			checkLevelUp(i)

			break
		}
	}

	BroadcastGameState()
}

func checkLevelUp(index int) {
	player := &GameState.Players[index]
	if player.CurrentXP >= player.RequiredXP {
		player.Level++
		player.RequiredXP = player.Level * 10
		player.Body += 1
		player.Strength += 1
		player.Dexterity += 1
		player.Intelligence += 1
		player.MP += player.Intelligence * 2
		player.HP = player.Body*3 + player.Strength*2
		player.Damage = calculatePhysicalDamage(*player)
		log.Printf("üéâ %s –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å –¥–æ %d!", player.Name, player.Level)
	}
}

func calculatePhysicalDamage(p types.Player) int {
	return p.Strength + sumItemPower(p.EquippedItems)
}
func sumItemPower(items map[string]types.Item) int {
	total := 0
	for _, item := range items {
		switch v := item.Bonus.(type) {
		case map[string]interface{}:
			if dmg, ok := v["damage"].(float64); ok {
				total += int(dmg)
			}
		case map[string]int:
			total += v["damage"]
		case int:
			total += v
		}
	}
	return total
}

func CheckCorpseLifespan() {
	for {
		time.Sleep(time.Minute) // —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
		Mutex.Lock()
		for y := range GameState.Map {
			for x := range GameState.Map[y] {
				if GameState.Map[y][x].CorpseTime.Before(time.Now()) && GameState.Map[y][x].CorpsePlayer != "" {
					log.Printf("‚ò†Ô∏è –¢—Ä—É–ø %s –∏—Å—á–µ–∑ –∏–∑ [%d,%d]", GameState.Map[y][x].CorpsePlayer, x, y)
					GameState.Map[y][x].Items = append(GameState.Map[y][x].Items, GameState.Map[y][x].PlayersItems...)
					GameState.Map[y][x].CorpsePlayer = ""
					GameState.Map[y][x].PlayersItems = nil
				}
			}
		}
		Mutex.Unlock()
	}
}

func HandleJoin(conn *websocket.Conn, data json.RawMessage) {
	type JoinData struct {
		Name     string         `json:"name"`
		Race     types.Race     `json:"race"`
		Religion types.Religion `json:"religion"`
	}

	var payload JoinData
	if err := json.Unmarshal(data, &payload); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö JOIN: %v", err)
		return
	}

	playerName := payload.Name
	race := payload.Race
	religion := payload.Religion
	Mutex.Lock()
	log.Printf("[handleJoin] üîí –ú—å—é—Ç–µ–∫—Å –∑–∞—Ö–≤–∞—á–µ–Ω")
	Mutex.Unlock()
	log.Printf("[handleJoin] üîì –ú—å—é—Ç–µ–∫—Å –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∏–≥—Ä–æ–∫
	for _, p := range GameState.Players {
		if p.Name == playerName {
			log.Printf("‚ö†Ô∏è –ò–≥—Ä–æ–∫ '%s' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", playerName)
			return
		}
	}

	// –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–∞—Å–µ
	body, strength, dexterity, intelligence := 10, 10, 10, 10
	switch race {
	case types.RaceHuman:
		strength += 1
		dexterity += 1
	case types.RaceElf:
		intelligence += 2
		dexterity += 1
	case types.RaceDrow:
		dexterity += 2
		body -= 1
	case types.RaceOrc:
		body += 2
		intelligence -= 2
	case types.RaceDwarf:
		body += 3
		strength += 1
	}

	newPlayer := types.Player{
		Name:          playerName,
		Level:         1,
		CurrentXP:     0,
		RequiredXP:    10,
		HP:            body*3 + strength*2,
		MP:            intelligence * 5,
		Race:          race,
		Religion:      religion,
		Position:      types.Position{X: 0, Y: 0},
		Body:          body,
		Strength:      strength,
		Dexterity:     dexterity,
		Intelligence:  intelligence,
		MagicSchools:  []types.MagicSchool{},
		Items:         []types.Item{},
		EquippedItems: make(map[string]types.Item),
		IsAlive:       true,
	}
	newPlayer.Damage = calculatePhysicalDamage(newPlayer)

	GameState.Players = append(GameState.Players, newPlayer)
	Clients[conn] = playerName

	log.Printf("‚úÖ –ò–≥—Ä–æ–∫ '%s' –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –º–∏—Ä—É –∫–∞–∫ %s (%s)", playerName, race, religion)
	BroadcastGameState()
}

func HandleLootCorpse(conn *websocket.Conn, data json.RawMessage) {
	type LootData struct {
		Name string `json:"name"`
		X    int    `json:"x"`
		Y    int    `json:"y"`
	}
	var payload LootData
	if err := json.Unmarshal(data, &payload); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö LOOT: %v", err)
		return
	}

	playerName := payload.Name
	x, y := payload.X, payload.Y

	Mutex.Lock()
	Mutex.Unlock()

	playerIndex := -1
	for i, p := range GameState.Players {
		if p.Name == playerName {
			playerIndex = i
			break
		}
	}
	if playerIndex == -1 {
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä—É–ø –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
	corpse := &GameState.Map[y][x]
	if corpse.CorpsePlayer == "" || !corpse.CorpseTime.After(time.Now()) {
		log.Printf("üö´ –ù–µ—Ç —Ç—Ä—É–ø–∞ –≤ [%d,%d]", x, y)
		return
	}

	// –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ç–æ–π –∂–µ –∫–æ–º–Ω–∞—Ç–µ
	if GameState.Players[playerIndex].Position.X != x || GameState.Players[playerIndex].Position.Y != y {
		log.Printf("üö´ –ò–≥—Ä–æ–∫ %s –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ [%d,%d]", playerName, x, y)
		return
	}

	// –ó–∞–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Ç—Ä—É–ø–∞
	player := &GameState.Players[playerIndex]

	// –ü—Ä–µ–¥–º–µ—Ç—ã —Ç—Ä—É–ø–∞
	corpseItems := GameState.Map[y][x].PlayersItems

	// –î–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∏–≥—Ä–æ–∫—É
	player.Items = append(player.Items, corpseItems...)

	// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
	log.Printf("üßü‚Äç‚ôÇÔ∏è %s –æ–±—ã—Å–∫–∞–ª —Ç—Ä—É–ø %s –≤ [%d,%d]", playerName, corpse.CorpsePlayer, x, y)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
	utils.SendChat(fmt.Sprintf("%s –æ–±—ã—Å–∫–∞–ª —Ç—Ä—É–ø %s", playerName, corpse.CorpsePlayer))

	// –û—á–∏—â–∞–µ–º —Ç—Ä—É–ø
	GameState.Map[y][x].PlayersItems = nil
	GameState.Map[y][x].CorpsePlayer = ""
	GameState.Map[y][x].CorpseTime = time.Time{}

	BroadcastGameState()
}

func HandleEquip(conn *websocket.Conn, data json.RawMessage) {
	type EquipData struct {
		Name     string `json:"name"`
		ItemName string `json:"item_name"`
	}

	var payload EquipData
	if err := json.Unmarshal(data, &payload); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö EQUIP: %v", err)
		return
	}

	playerName := payload.Name
	itemName := payload.ItemName

	Mutex.Lock()
	Mutex.Unlock()

	playerIndex := findPlayerIndex(playerName)
	if playerIndex == -1 {
		log.Printf("üö´ –ò–≥—Ä–æ–∫ %s –Ω–µ –Ω–∞–π–¥–µ–Ω", playerName)
		return
	}

	player := &GameState.Players[playerIndex]

	// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–∞—Ä—Ç–∞ EquippedItems –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
	if player.EquippedItems == nil {
		player.EquippedItems = make(map[string]types.Item)
	}

	// –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
	for i, item := range player.Items {
		if item.Name == itemName {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø
			if item.Type == "weapon" || item.Type == "ring" {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –Ω–∞–¥–µ—Ç–æ–≥–æ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞
				if equipped, ok := player.EquippedItems[item.Type]; ok {
					log.Printf("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –Ω–∞–¥–µ—Ç–æ: %s", equipped.Name)
					break
				}

				// –ù–∞–¥–µ–≤–∞–µ–º
				player.EquippedItems[item.Type] = item
				// –£–±–∏—Ä–∞–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
				player.Items = append(player.Items[:i], player.Items[i+1:]...)
				player.Damage = calculatePhysicalDamage(*player)

				log.Printf("üß¶ %s –Ω–∞–¥–µ–ª %s", playerName, itemName)
				utils.SendChat(fmt.Sprintf("%s –Ω–∞–¥–µ–ª %s", playerName, itemName))
			} else if item.Type == "potion" || item.Type == "scroll" {
				// üí• –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–µ–ª—å–µ/—Å–≤–∏—Ç–æ–∫
				useItem(player, item)
				// –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
				player.Items = append(player.Items[:i], player.Items[i+1:]...)
				log.Printf("üß™ %s –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª %s", playerName, itemName)
				utils.SendChat(fmt.Sprintf("%s –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª %s", playerName, itemName))
			} else {
				log.Printf("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞: %s", item.Type)
			}

			break
		}
	}

	BroadcastGameState()
}

func HandleUnequip(conn *websocket.Conn, data json.RawMessage) {
	type UnequipData struct {
		Name     string `json:"name"`
		ItemType string `json:"item_type"` // "weapon", "ring"
	}

	var payload UnequipData
	if err := json.Unmarshal(data, &payload); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö UNEQUIP: %v", err)
		return
	}

	playerName := payload.Name
	itemType := payload.ItemType

	Mutex.Lock()
	Mutex.Unlock()

	playerIndex := findPlayerIndex(playerName)
	if playerIndex == -1 {
		log.Printf("üö´ –ò–≥—Ä–æ–∫ %s –Ω–µ –Ω–∞–π–¥–µ–Ω", playerName)
		return
	}

	player := &GameState.Players[playerIndex]

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–¥–µ—Ç—ã–π –ø—Ä–µ–¥–º–µ—Ç
	equippedItem, exists := player.EquippedItems[itemType]
	if !exists {
		log.Printf("üö´ –ù–µ—Ç –Ω–∞–¥–µ—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —Ç–∏–ø–∞ %s —É %s", itemType, playerName)
		return
	}

	// –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
	delete(player.EquippedItems, itemType)
	player.Items = append(player.Items, equippedItem)
	player.Damage = calculatePhysicalDamage(*player)

	log.Printf("üß¶ %s —Å–Ω—è–ª %s", playerName, equippedItem.Name)
	utils.SendChat(fmt.Sprintf("%s —Å–Ω—è–ª %s", playerName, equippedItem.Name))

	BroadcastGameState()
}

func useItem(p *types.Player, item types.Item) {
	switch item.Type {
	case "potion":
		p.HP += item.Bonus.(map[string]int)["heal"]
		if p.HP > p.Body*3+p.Strength*2 {
			p.HP = p.Body*3 + p.Strength*2
		}
	case "scroll":
		// –ù–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è
		x, y := p.Position.X, p.Position.Y
		if x < 9 {
			p.Position.X++
		} else if y < 9 {
			p.Position.Y++
		} else {
			p.Position.X = 0
			p.Position.Y = 0
		}
	}
}

func RemoveClient(conn *websocket.Conn) {
	Mutex.Lock()
	Mutex.Unlock()

	name := Clients[conn]
	delete(Clients, conn)

	// –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
	var updated []types.Player
	for _, p := range GameState.Players {
		if p.Name != name {
			updated = append(updated, p)
		} else {
			// –î–µ–ª–∞–µ–º –µ–≥–æ "—Ç—Ä—É–ø–æ–º"
			p.IsAlive = false
			p.HP = 0
			x, y := p.Position.X, p.Position.Y
			GameState.Map[y][x].CorpsePlayer = p.Name
			GameState.Map[y][x].CorpseTime = time.Now().Add(24 * time.Hour)
			GameState.Map[y][x].PlayersItems = p.Items
		}
	}
	GameState.Players = updated

	log.Printf("üóëÔ∏è –ö–ª–∏–µ–Ω—Ç '%s' –æ—Ç–∫–ª—é—á–µ–Ω", name)
	BroadcastGameState()
}
