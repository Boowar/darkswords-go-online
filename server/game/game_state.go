package game

import (
	"dark-swords/types"
	"encoding/json"
	"log"
	"sync"

	"github.com/gorilla/websocket"
)

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
var GameState types.GameState
var Clients map[*websocket.Conn]string
var Mutex *sync.Mutex

// --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
func SetGameState(gs types.GameState) {
	GameState = gs
}

func SetMutex(m *sync.Mutex) {
	Mutex = m
}

func SetClients(clientsMap map[*websocket.Conn]string) {
	Clients = clientsMap
}

// --- –†–∞—Å—Å—ã–ª–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
func BroadcastGameState() {
	log.Printf("üîÑ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º")
	//log.Printf("üéÆ [broadcast] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã: %+v", gameState)
	log.Printf("üë• [broadcast] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: %d", len(Clients))
	Mutex.Lock()
	log.Printf("üîí –ú—å—é—Ç–µ–∫—Å –∑–∞—Ö–≤–∞—á–µ–Ω")
	defer func() {
		Mutex.Unlock()
		log.Printf("üîì –ú—å—é—Ç–µ–∫—Å –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω")
	}()
	GameState.Map = updateMapWithPlayers(GameState.Players, GameState.Map)

	// –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
	dataToSend := GameState

	// –û—á–∏—â–∞–µ–º –ª–æ–≥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ä–∞—É–Ω–¥–æ–º
	GameState.Log = nil

	data, err := json.Marshal(struct {
		Type string          `json:"type"`
		Data types.GameState `json:"data"`
	}{
		Type: "update",
		Data: dataToSend,
	})

	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: %v", err)
		return
	}

	//log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", data)

	for conn := range Clients {
		if err := conn.WriteMessage(websocket.TextMessage, data); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É: %v", err)
		} else {
			log.Printf("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É")
		}
	}
}
