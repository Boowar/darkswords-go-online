package utils

import (
	"encoding/json"
	"log"
	"sync"

	"dark-swords/types"

	"github.com/gorilla/websocket"
)

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
var GameState types.GameState
var Clients map[*websocket.Conn]string
var Mutex *sync.Mutex

// --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
func SetGameState(gs *types.GameState) {
	log.Printf("üí¨ [logger.go SetGameState] SetGameState")
	GameState = *gs
}

func SetClients(ClientsMap map[*websocket.Conn]string) {
	log.Printf("üí¨ [logger.go SetClients] SetClients")
	Clients = ClientsMap
}

func SetMutex(m *sync.Mutex) {
	log.Printf("üí¨ [logger.go SetMutex] SetMutex")
	Mutex = m
}

// --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ---
func SendChatMessage(sender string, text string) {
	log.Printf("üí¨ [–ß–∞—Ç] %s: %s", sender, text)

	msg := struct {
		Type string `json:"type"` // chat
		Data struct {
			Name string `json:"name"`
			Text string `json:"text"`
		} `json:"data"`
	}{
		Type: "chat",
		Data: struct {
			Name string `json:"name"`
			Text string `json:"text"`
		}{Name: sender, Text: text},
	}

	data, _ := json.Marshal(msg)

	Mutex.Lock()
	Mutex.Unlock()

	for conn := range Clients {
		if err := conn.WriteMessage(websocket.TextMessage, data); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É: %v", err)
		}
	}
}

// --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Log ---
func LogEvent(event string) {
	log.Printf("üìù [–õ–æ–≥] %s", event)

	Mutex.Lock()
	Mutex.Unlock()

	GameState.Log = append(GameState.Log, event)
	//game.BroadcastGameState()
}

func SendChat(text string) {
	log.Printf("üí¨ [–ß–∞—Ç] %s", text)

	msg := struct {
		Type string `json:"type"` // chat
		Data struct {
			Name string `json:"name"`
			Text string `json:"text"`
		} `json:"data"`
	}{
		Type: "chat",
		Data: struct {
			Name string `json:"name"`
			Text string `json:"text"`
		}{Name: "–°–∏—Å—Ç–µ–º–∞", Text: text},
	}

	data, err := json.Marshal(msg)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞: %v", err)
		return
	}

	for conn := range Clients {
		if err := conn.WriteMessage(websocket.TextMessage, data); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: %v", err)
		}
	}
}
