const socket = new WebSocket('ws://localhost:8080/ws');

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const loginForm = document.getElementById("loginForm");
const gameContainer = document.getElementById("gameContainer");
const playerDisplayName = document.getElementById("playerDisplayName");
const playerStats = document.getElementById("playerStats");
const gameMapDiv = document.getElementById("gameMap");
const chatLog = document.getElementById("chatLog");
const attackMonsterBtn = document.getElementById("attackMonsterBtn");

let playerName = null;
let gameState = { Players: [], Map: [], Log: [] };

console.log("üéÆ –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω");

// --- –°–æ–±—ã—Ç–∏—è WebSocket ---
socket.onopen = () => {
    console.log("üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
};

socket.onmessage = function(event) {
    console.log("üì® [–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞]");
    console.log("RAW –¥–∞–Ω–Ω—ã–µ:", event.data);

    let msg;
    try {
        msg = JSON.parse(event.data);
        console.log("–†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", msg);
    } catch (e) {
        console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON:", event.data);
        return;
    }

    if (msg.type === "update") {
        console.log("üîÑ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã");
        gameState.Players = msg.data.Players; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        gameState.Map = msg.data.Map; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        gameState.Log = msg.data.Log; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        updateUI(msg.data);
    } else if (msg.type === "chat") {
        console.log("üí¨ –ü–æ–ª—É—á–µ–Ω–æ —á–∞—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ:", msg.data.text);
        logMessage(`üí¨ ${msg.data.name}: ${msg.data.text}`);
    } else {
        console.warn("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:", msg.type);
    }

    console.log("");
};

function logMessage(text) {
    const log = document.getElementById("chatLog");
    log.innerHTML += `<div>${text}</div>`;
    log.scrollTop = log.scrollHeight;
}

// --- –í—Ö–æ–¥ –≤ –∏–≥—Ä—É ---
function join() {
    console.group("üë§ [JOIN] –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞");
    const name = document.getElementById("playerName").value.trim();
    const race = document.getElementById("playerRace").value;
    const religion = document.getElementById("playerReligion").value;

    console.log("–ò–º—è:", name);
    console.log("–†–∞—Å–∞:", race);
    console.log("–†–µ–ª–∏–≥–∏—è:", religion);

    if (!name || !race || !religion) {
        alert("–í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ä–∞—Å—É –∏ —Ä–µ–ª–∏–≥–∏—é!");
        console.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ");
        console.groupEnd();
        return;
    }

    playerName = name;
    playerDisplayName.textContent = name;

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JOIN –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä...");
    socket.send(JSON.stringify({
        type: "join",
        data: { name, race, religion }
    }));

    loginForm.style.display = "none";
    gameContainer.style.display = "block";

    console.log("‚úÖ –ò–≥—Ä–æ–∫ –≤–æ—à—ë–ª –≤ –∏–≥—Ä—É");
    console.groupEnd();
}

// --- –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã ---
function leaveGame() {
    console.group("üö™ [LEAVE] –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∏–≥—Ä—ã");
    if (!playerName) {
        console.warn("üö´ –ò–≥—Ä–æ–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        console.groupEnd();
        return;
    }

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º LEAVE –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä...");
    socket.send(JSON.stringify({ 
        type: "leave", 
        data: { name: playerName } 
    }));

    playerName = null;
    gameState = { players: [], map: [], log: [] };

    loginForm.style.display = "block";
    gameContainer.style.display = "none";
    document.getElementById("playerName").value = "";
    document.getElementById("playerStats").innerHTML = "";

    console.log("‚úÖ –ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã");
    console.groupEnd();
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
function updateUI(data) {
    console.group("üìä [UPDATE] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞");
    console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data);

    if (!data) {
        console.error("‚ùå –î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ");
        return;
    }

    const player = data.Players.find(p => p.Name === playerName);
    if (!player) {
        console.warn("üö´ –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã");
        return;
    }

    console.log("üéÆ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ:", player);

    playerStats.innerHTML = `
        <p><strong>üß¨ –†–∞—Å–∞:</strong> ${player.Race}</p>
        <p><strong>üïØÔ∏è –†–µ–ª–∏–≥–∏—è:</strong> ${player.Religion}</p>
        <p><strong>üèÖ –£—Ä–æ–≤–µ–Ω—å:</strong> ${player.Level}</p>
        <p><strong>‚ö° XP:</strong> ${player.CurrentXP} / ${player.RequiredXP}</p>
        <p><strong>‚ù§Ô∏è HP:</strong> ${player.HP}, <strong>üß† MP:</strong> ${player.MP}</p>
        <p><strong>üí• –£—Ä–æ–Ω:</strong> ${player.Damage}</p>
        <p><strong>–¢–µ–ª–æ:</strong> ${player.Body}, <strong>–°–∏–ª–∞:</strong> ${player.Strength}</p>
        <p><strong>–õ–æ–≤–∫–æ—Å—Ç—å:</strong> ${player.Dexterity}, <strong>–†–∞–∑—É–º:</strong> ${player.Intelligence}</p>
    `;

    renderMap(data.Map);
    renderInventory(player.Items);

    // --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–¥–µ—Ç—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ---
    const equippedDiv = document.getElementById("equipped");
    equippedDiv.innerHTML = "<h3>‚öîÔ∏è –ù–∞–¥–µ—Ç—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:</h3>";

    if (player.EquippedItems && typeof player.EquippedItems === 'object') {
        Object.entries(player.EquippedItems).forEach(([slot, item]) => {
            equippedDiv.innerHTML += `<p>üó° ${item.Name} (${item.Type}): ${formatBonus(item.Bonus)}</p><button onclick="unequip('${slot}')">üß¶ –°–Ω—è—Ç—å</button>`;
        });
    } else {
        equippedDiv.innerHTML += "<p>–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–¥–µ—Ç–æ</p>";
    }

    // --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–∞: —Ç–æ–ª—å–∫–æ –±–æ–π –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç–µ ---
    const currentRoom = data.Map[player.Position.Y][player.Position.X];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–æ–π –≤ –∫–æ–º–Ω–∞—Ç–µ
    if (currentRoom.Monsters && currentRoom.Monsters.length > 0) {
        document.getElementById("chatLog").innerHTML += `<div class="log-event">‚öîÔ∏è –ë–æ–π –Ω–∞—á–∞–ª—Å—è –≤ –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç–µ!</div>`;
        currentRoom.Monsters.forEach(monster => {
            document.getElementById("chatLog").innerHTML += `
                <div class="log-event">
                    üëπ –ú–æ–Ω—Å—Ç—Ä: ${monster.Name} | –£—Ä–æ–≤–µ–Ω—å: ${monster.Level} | HP: ${monster.HP}
                </div>`;
        });
    }

    // --- –õ–æ–≥ –±–æ—è –∏–∑ gameState.Log ---
    if (data.Log && Array.isArray(data.Log)) {
        data.Log.forEach(logEntry => {
            const lower = logEntry.toLowerCase();
            if (
                lower.includes(player.Name.toLowerCase()) || // –µ—Å–ª–∏ —ç—Ç–æ —Ç—ã
                lower.includes(`[${player.Position.X},${player.Position.Y}]`) // –µ—Å–ª–∏ —ç—Ç–æ —Ç–≤–æ—è –∫–æ–º–Ω–∞—Ç–∞
            ) {
                logMessage(logEntry);
            }
        });
    }

    // --- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä—É–ø –≤ –∫–æ–º–Ω–∞—Ç–µ ---
    const corpseInfoDiv = document.getElementById("corpseInfo");
    const corpseNameSpan = document.getElementById("corpseName");
    const lootBtn = document.getElementById("lootBtn");

    if (currentRoom.CorpsePlayer && new Date(currentRoom.CorpseTime) > new Date()) {
        corpseNameSpan.textContent = currentRoom.CorpsePlayer;
        corpseInfoDiv.style.display = "block";
        lootBtn.style.display = "block";
        lootBtn.onclick = () => {
            socket.send(JSON.stringify({
                type: "loot_corpse",
                data: { name: playerName, x: player.Position.X, y: player.Position.Y }
            }));
        };
    } else {
        corpseInfoDiv.style.display = "none";
        lootBtn.style.display = "none";
    }

    console.groupEnd();
}

// --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã ---
function renderMap(map) {
    gameMapDiv.innerHTML = "";

    for (let y = 0; y < map.length; y++) {
        for (let x = 0; x < map[y].length; x++) {
            const room = map[y][x];
            const roomDiv = document.createElement("div");
            roomDiv.className = "room empty-room";

            if (room.BiomeType === "forest") {
                roomDiv.classList.replace("empty-room", "biome-forest");
                roomDiv.innerHTML += `<div class="icon">üå≤</div>`;
            } else if (room.BiomeType === "desert") {
                roomDiv.classList.replace("empty-room", "biome-desert");
                roomDiv.innerHTML += `<div class="icon">‚òÄÔ∏è</div>`;
            } else if (room.BiomeType === "mountains") {
                roomDiv.classList.replace("empty-room", "biome-mountains");
                roomDiv.innerHTML += `<div class="icon">‚õ∞</div>`;
            } else if (room.BiomeType === "swamp") {
                roomDiv.classList.replace("empty-room", "biome-swamp");
                roomDiv.innerHTML += `<div class="icon">üåø</div>`;
            } else if (room.BiomeType === "road") {
                roomDiv.classList.replace("empty-room", "road");
                roomDiv.innerHTML += `<div class="icon">üõ£</div>`;
            }
            // --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∞—Å—Å–∞ –ø–æ —Ç–∏–ø—É ---
            if (room.LocationType === "shop") {
                //roomDiv.classList.replace("empty-room", "safe-room");
                roomDiv.innerHTML += `<div class="icon">üõí</div>`;
            } else if (room.LocationType === "guild") {
                //roomDiv.classList.replace("empty-room", "safe-room");
                roomDiv.innerHTML += `<div class="icon">üèõ</div>`;
            } else if (room.LocationType === "stair") {
                //roomDiv.classList.replace("empty-room", "safe-room");
                roomDiv.innerHTML += `<div class="icon">ü™ú</div>`;
            }  

            if (room.CorpsePlayer && new Date(room.CorpseTime) > new Date()) {
                //roomDiv.classList.replace("empty-room", "corpse-room");
                roomDiv.innerHTML += `<div class="icon">‚ò†Ô∏è</div>`;
            } else if (room.LocationType === "safe") {
                //roomDiv.classList.replace("empty-room", "safe-room");
                roomDiv.innerHTML += `<div class="icon">üè†</div>`;
            } else if (room.Monsters && room.Monsters.length > 0) {
                //roomDiv.classList.replace("empty-room", "monster-room");
                roomDiv.innerHTML += `<div class="icon">üëπ</div><div>${room.Monsters.length}</div>`;
            }

            // –ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ
            const playersHere = gameState.Players.filter(p => p.Position.X === x && p.Position.Y === y).map(p => p.Name);
            if (playersHere.length > 0) {
                const names = document.createElement("div");
                names.style.fontSize = "0.6em";
                names.textContent = playersHere.join(", ");
                roomDiv.appendChild(names);
            }

            roomDiv.onclick = () => {
                if (playerName) {
                    movePlayer(x, y);
                }
            };

            gameMapDiv.appendChild(roomDiv);
        }
    }

    // --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω—Å—Ç—Ä–µ –≤ –∫–æ–º–Ω–∞—Ç–µ –∏–≥—Ä–æ–∫–∞ ---
    const player = gameState.Players.find(p => p.Name === playerName);
    if (!player) return;

    const currentRoom = map[player.Position.Y][player.Position.X];

    const monsterInfoDiv = document.getElementById("monsterInfo");
    const monsterNameSpan = document.getElementById("monsterName");
    const monsterLevelSpan = document.getElementById("monsterLevel");
    const monsterHPSpan = document.getElementById("monsterHP");
    const monsterMaxHPSpan = document.getElementById("monsterMaxHP");
    const monsterDamageSpan = document.getElementById("monsterDamage");
    const monsterSchoolSpan = document.getElementById("monsterSchool");
    const monsterResistSpan = document.getElementById("monsterResist");

    if (currentRoom.Monsters && currentRoom.Monsters.length > 0) {
        const monster = currentRoom.Monsters[0];
        console.log("üëπ –ú–æ–Ω—Å—Ç—Ä –≤ –∫–æ–º–Ω–∞—Ç–µ:", monster);

        monsterNameSpan.textContent = monster.Name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        monsterLevelSpan.textContent = monster.Level || 0;
        monsterHPSpan.textContent = monster.HP || 0;
        monsterMaxHPSpan.textContent = monster.MaxHP || 0;
        monsterDamageSpan.textContent = monster.Damage || 0;
        monsterSchoolSpan.textContent = monster.School || "–Ω–µ—Ç —à–∫–æ–ª—ã";
        monsterResistSpan.textContent = Object.entries(monster.Resist || {}).map(([k, v]) => `${k}:${v}`).join(" ") || "–Ω–µ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è";

        monsterInfoDiv.style.display = "block";

        console.log("‚öîÔ∏è –ú–æ–Ω—Å—Ç—Ä –≤ –∫–æ–º–Ω–∞—Ç–µ –Ω–∞–π–¥–µ–Ω:", currentRoom.Monsters[0].Name);
        attackMonsterBtn.style.display = "block";
        attackMonsterBtn.onclick = () => {
            console.log("üó°Ô∏è –ò–≥—Ä–æ–∫ –Ω–∞—á–∞–ª –∞—Ç–∞–∫–æ–≤–∞—Ç—å –º–æ–Ω—Å—Ç—Ä–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ");
            attackMonster(player.Position.X, player.Position.Y);
        };
    } else {
        monsterInfoDiv.style.display = "none";
        console.log("üõ°Ô∏è –í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –º–æ–Ω—Å—Ç—Ä–æ–≤");
        attackMonsterBtn.style.display = "none";
    }
}

// --- –ö–æ–º–∞–Ω–¥—ã ---
function movePlayer(x, y) {
    console.log(`üë£ –ò–≥—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É MOVE –Ω–∞ [${x},${y}]`);
    socket.send(JSON.stringify({
        type: "move",
        data: {
            name: playerName,
            to: { x, y }
        }
    }));
}

function attackMonster(x, y) {
    console.log(`‚öîÔ∏è –ò–≥—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É ATTACK_MONSTER –Ω–∞ [${x},${y}]`);
    socket.send(JSON.stringify({
        type: "attack_monster",
        data: {
            name: playerName,
            x, y
        }
    }));
}

function lootCorpse() {
    const player = gameState.Players.find(p => p.Name === playerName);
    if (!player) return;

    const x = player.Position.X;
    const y = player.Position.Y;

    socket.send(JSON.stringify({
        type: "loot_corpse",
        data: { name: playerName, x, y }
    }));
}

function renderInventory(items) {
    const inventoryList = document.getElementById("inventoryList");
    if (!items || items.length === 0) {
        inventoryList.innerHTML = `<p>üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</p>`;
        return;
    }

    inventoryList.innerHTML = "";
    items.forEach((item, index) => {
        const itemDiv = document.createElement("div");
        itemDiv.className = "item";
        itemDiv.style.margin = "5px 0";

        itemDiv.innerHTML = `
            <strong>${item.Name}</strong> (${item.Type})<br>
            <small>–ú–∏–Ω. —É—Ä–æ–≤–µ–Ω—å: ${item.MinLevel} | –ë–æ–Ω—É—Å: ${formatBonus(item.Bonus)}</small><br>
        `;

        // --- –ö–Ω–æ–ø–∫–∏ ---
        let button = null;

        if (item.Type === "weapon" || item.Type === "ring") {
            button = document.createElement("button");
            button.textContent = "üß¶ –ù–∞–¥–µ—Ç—å";
            button.onclick = () => equipItem(item.Name);
        } else if (item.Type === "potion" || item.Type === "scroll") {
            button = document.createElement("button");
            button.textContent = "üß™ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å";
            button.onclick = () => useItem(item.Name);
        }

        if (button) {
            itemDiv.appendChild(button);
        }

        inventoryList.appendChild(itemDiv);
    });
}

function formatBonus(bonus) {
    if (typeof bonus === "number") {
        return `+${bonus}`;
    } else if (typeof bonus === "object" && bonus !== null) {
        let result = "";
        for (const key in bonus) {
            result += `${key}: +${bonus[key]}, `;
        }
        return result.slice(0, -2); // —É–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø—è—Ç—É—é
    }
    return "–Ω–µ—Ç –±–æ–Ω—É—Å–æ–≤";
}

function equipItem(itemName) {
    socket.send(JSON.stringify({
        type: "equip",
        data: { name: playerName, item_name: itemName }
    }));
}

function useItem(itemName) {
    equipItem(itemName); // —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø
}

function unequip(itemType) {
    socket.send(JSON.stringify({
        type: "unequip",
        data: { name: playerName, item_type: itemType }
    }));
}

function castSpell(school) {
    const player = gameState.Players.find(p => p.Name === playerName);
    if (!player) return;

    socket.send(JSON.stringify({
        type: "use_spell",
        data: {
            user: playerName,
            target: "–ì–æ–±–ª–∏–Ω", // –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
            school: school
        }
    }));
}